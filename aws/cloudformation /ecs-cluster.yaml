AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Cluster with Fargate tasks for client services'

Resources:
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: 'ClientECSCluster'

  ECSFargateTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
            Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: 'ecsTaskExecutionRolePolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'ecr:GetAuthorizationToken'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'

  ECSTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: 'ClientServiceTaskDefinition'
      Cpu: '256'
      Memory: '512'
      NetworkMode: 'awsvpc'
      RequiresCompatibilities:
        - 'FARGATE'
      ExecutionRoleArn: !GetAtt ECSFargateTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: 'ClientContainer'
          Image: 'your-ecr-repo/client-service:latest'
          Essential: true
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: 'client-service'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'ecs'

  ECSFargateService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: 'FARGATE'
      TaskDefinition: !Ref ECSTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: 'ENABLED'
          Subnets:
            - !ImportValue 'PublicSubnetId'
          SecurityGroups:
            - !Ref ECSSecurityGroup

  ECSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow HTTP access to ECS containers'
      VpcId: !ImportValue 'VPCId'
​⬤