AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: |
  Serverless application with OP Gateway for Authorization Server (AS) with mTLS and Fargate integration.

Parameters:

  VpcStack:
    Type: String
    Description: Name of VPC stack to build off of

  EndpointStack:
    Type: String
    Description: Name of ECS Cluster stack to build off of

  MTLSImage:
    Type: String
    Description: URI of image you would like to use

  OPImage:
    Type: String
    Description: URI of image you would like to use

  APIImage:
    Type: String
    Description: URI of image you would like to use

  MongoImage:
    Type: String

Resources:

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}-Cluster

  MTLSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckProtocol: TCP 
      HealthCheckPort: traffic-port
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      TargetType: ip
      Port: 443
      Protocol: TCP
      VpcId:
        Fn::ImportValue: !Sub ${VpcStack}-vpc-id

  MTLSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref MTLSTargetGroup
          Type: forward
      LoadBalancerArn:
        Fn::ImportValue: !Sub ${EndpointStack}-nlb-arn
      Port: 443
      Protocol: TCP
    DependsOn:
      - MTLSTargetGroup

  FargateServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${AWS::StackName}'
      RetentionInDays: 7

  FargateService:
    Type: AWS::ECS::Service
    DependsOn:
      - MTLSTargetGroup
      - FargateServiceLogGroup
    Properties:
      Cluster: !Ref EcsCluster
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: MTLSContainer
          ContainerPort: 443
          TargetGroupArn: !Ref MTLSTargetGroup
      NetworkConfiguration:
          AwsvpcConfiguration:
            SecurityGroups:
              - Fn::ImportValue: !Sub ${EndpointStack}-default-security-group
            Subnets:
              - Fn::ImportValue: !Sub ${VpcStack}-public-subnet-1-id
      TaskDefinition: !Ref TaskDefinition

  TaskRole: 
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']

  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'
            - Effect: Allow
              Action:
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: !GetAtt FargateServiceLogGroup.Arn

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: MTLSContainer
          Essential: true
          Image: !Ref MTLSImage
          LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-create-group: true
                awslogs-group: !Ref FargateServiceLogGroup
                awslogs-stream-prefix: mtls-container 
                awslogs-region: !Ref AWS::Region
          PortMappings:
            - ContainerPort: 443
              HostPort: 443
              Protocol: tcp
          Environment:
            - Name: PORT
              Value: "443" 
            - Name: CA_CERT_PATH
              Value: /app/certs/ca.crt
            - Name: SERVER_CERT_PATH
              Value: /app/certs/mtls.crt
            - Name: SERVER_KEY_PATH
              Value: /app/certs/mtls.key
            - Name: AUTH_HOST
              Value: http://op:3000
            - Name: API_HOST
              Value: http://api:8080
            - Name: EXTERNAL_AUTH_HOST
              Value: auth.localhost
            - Name: EXTERNAL_API_HOST
              Value: api.localhost
            - Name: CLIENT_ID
              Value: client
            - Name: CLIENT_SECRET
              Value: 12345678
            - Name: INTROSPECTION_URL
              Value: http://op:3000/token/introspection
            - Name: USER_INFO_URL
              Value: http://op:3000/me
            - Name: ISSUER
              Value: https://auth.localhost
        - Name: OPContainer
          Essential: true
          Image: !Ref OPImage
          LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-create-group: true
                awslogs-group: !Ref FargateServiceLogGroup
                awslogs-stream-prefix: op-container 
                awslogs-region: !Ref AWS::Region
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp
          Environment:
            - Name: MONGO_URI
              Value: mongodb://mongo:27017/oidc-provider
            - Name: DEBUG
              Value: '*'
        - Name: APIContainer
          Essential: true
          Image: !Ref APIImage
          LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-create-group: true
                awslogs-group: !Ref FargateServiceLogGroup
                awslogs-stream-prefix: api-container 
                awslogs-region: !Ref AWS::Region
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
          Environment:
            - Name: CONFIG_PATH
              Value: /app/config.json
            - Name: API_PATH
              Value: /au/v1.0/confirmation-of-telephony/threat-score
        - Name: MongoContainer
          Essential: true
          Image: !Ref MongoImage
          LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-create-group: true
                awslogs-group: !Ref FargateServiceLogGroup
                awslogs-stream-prefix: mongo-container 
                awslogs-region: !Ref AWS::Region
          PortMappings:
            - ContainerPort: 27017
              HostPort: 27017
              Protocol: tcp
      Cpu: '512'
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        -  FARGATE
      TaskRoleArn: !Ref TaskRole

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ECS task to access ECR
      VpcId:  
        Fn::ImportValue: !Sub ${VpcStack}-vpc-id
      SecurityGroupEgress:
        - IpProtocol: -1  
          CidrIp: 0.0.0.0/0
Outputs:
  FargateServiceName:
    Description: A reference to the created Fargate Service
    Value: !GetAtt FargateService.Name
    Export:
      Name: !Sub ${AWS::StackName}-fargate-service-name
