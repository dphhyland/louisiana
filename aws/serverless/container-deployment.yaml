AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: |
  Serverless application with OP Gateway for Authorization Server (AS) with mTLS and Fargate integration.

Parameters:

  VpcStack:
    Type: String
    Description: Name of VPC stack to build off of
    Default: vpc-stack

  EcsClusterStack:
    Type: String
    Description: Name of ECS Cluster stack to build off of
    Default: ecs-cluster-stack

  MTLSImage:
    Type: String
    Description: URI of image you would like to use

  OPImage:
    Type: String
    Description: URI of image you would like to use

  APIImage:
    Type: String
    Description: URI of image you would like to use

  MongoImage:
    Type: String

Resources:

  MTLSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckProtocol: TCP 
      HealthCheckPort: traffic-port
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      TargetType: ip
      Port: 443
      Protocol: TCP
      VpcId:
        Fn::ImportValue: !Sub ${VpcStack}-vpc-id

  MTLSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref MTLSTargetGroup
          Type: forward
      LoadBalancerArn:
        Fn::ImportValue: !Sub ${EcsClusterStack}-nlb-arn
      Port: 443
      Protocol: TCP
    DependsOn:
      - MTLSTargetGroup

  FargateService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: !Sub ${EcsClusterStack}-ecs-cluster
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: MTLSContainer
          ContainerPort: 443
          TargetGroupArn: !Ref MTLSTargetGroup
      NetworkConfiguration:
          AwsvpcConfiguration:
            SecurityGroups:
              - Fn::ImportValue: !Sub ${EcsClusterStack}-default-security-group
            Subnets:
              - Fn::ImportValue: !Sub ${VpcStack}-private-subnet-a-id
              - Fn::ImportValue: !Sub ${VpcStack}-private-subnet-b-id
      TaskDefinition: !Ref TaskDefinition

  FargateServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: MTLSContainer
          Essential: true
          Image: !Ref MTLSImage
          LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref FargateServiceLogGroup
                awslogs-stream-prefix: mtls-container 
                awslogs-region: !Ref AWS::Region
          PortMappings:
            - ContainerPort: 443
              HostPort: 443
              Protocol: tcp
          Environment:
            - Name: PORT
              Value: "443" 
        - Name: OPContainer
          Essential: true
          Image: !Ref OPImage
          LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref FargateServiceLogGroup
                awslogs-stream-prefix: op-container 
                awslogs-region: !Ref AWS::Region
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp
        - Name: APIContainer
          Essential: true
          Image: !Ref APIImage
          LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref FargateServiceLogGroup
                awslogs-stream-prefix: api-container 
                awslogs-region: !Ref AWS::Region
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
          Environment:
            - Name: PORT
              Value: "8080" 
        - Name: MongoContainer
          Essential: true
          Image: !Ref MongoImage
          LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref FargateServiceLogGroup
                awslogs-stream-prefix: api-container 
                awslogs-region: !Ref AWS::Region
          PortMappings:
            - ContainerPort: 27017
              HostPort: 27017
              Protocol: tcp
      Cpu: '512'
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ${EcsClusterStack}-default-role
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        -  FARGATE
      TaskRoleArn:
        Fn::ImportValue: !Sub ${EcsClusterStack}-default-role

Outputs:
  FargateServiceName:
    Description: A reference to the created Fargate Service
    Value: !GetAtt FargateService.Name
    Export:
      Name: !Sub ${AWS::StackName}-fargate-service-name
