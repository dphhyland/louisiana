AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: |
  Serverless application with OP Gateway for Authorization Server (AS) with mTLS and Fargate integration.

Parameters:
  EnvironmentName:
    Description: Environment name for the application - [dev/staging/production]
    Type: String
    AllowedValues:
      - dev
      - staging
      - production

  DomainName:
    Type: String
    Description: The name of the domain for the API - this needs to match the name
      of the Certificate ARN.

  CertificateArn:
    Type: String

  Route53HostedZoneId:
    Type: String

  LoadBalancerDNS:
    Type: String 


Conditions:
  DomainNotEmpty: !Not
    - !Equals
      - !Ref DomainName
      - ''

Resources:

  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchLogsRole.Arn

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/API-Gateway/${AWS::StackName}/access-logs
      RetentionInDays: 7

  OPGateway:
    Type: AWS::Serverless::Api
    DependsOn: ApiGatewayAccount
    Properties:
      StageName: !Ref EnvironmentName
      EndpointConfiguration: REGIONAL
      DisableExecuteApiEndpoint: true
      AccessLogSetting:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "caller":"$context.identity.caller", "user":"$context.identity.user",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "resourcePath":"$context.resourcePath", "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLength":"$context.responseLength" }'
      DefinitionBody:
        swagger: '2.0'
        info:
          title: !Ref AWS::StackName
        paths:
          /token:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub http://${LoadBalancerDNS}/token
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: http_proxy
          /.well-known/openid-configuration:
            get:
              x-amazon-apigateway-integration:
                uri: !Sub http://${LoadBalancerDNS}/.well-known/openid-configuration
                passthroughBehavior: when_no_match
                httpMethod: GET
                type: http_proxy
          /jwks:
            get:
              x-amazon-apigateway-integration:
                uri: !Sub http://${LoadBalancerDNS}/jwks
                passthroughBehavior: when_no_match
                httpMethod: GET
                type: http_proxy
      Cors:
        AllowMethods: '''POST,OPTIONS,GET'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowOrigin: '''*'''
        MaxAge: '''300'''

  OPDomainName:
    Type: AWS::ApiGateway::DomainName
    Condition: DomainNotEmpty
    Properties:
      DomainName: !Ref DomainName
      RegionalCertificateArn: !Ref CertificateArn
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2
      MutualTlsAuthentication:
        TruststoreUri: !Sub s3://com.trustframeworks/certs/ca.crt

  OPDomainNameApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: DomainNotEmpty
    DependsOn:
      - OPDomainName
      - OPGateway
    Properties:
      DomainName: !Ref DomainName
      RestApiId: !Ref OPGateway
      Stage: !Ref EnvironmentName

  SandboxASRecordSet:
    Type: AWS::Route53::RecordSet
    Condition: DomainNotEmpty
    DependsOn: OPDomainName
    Properties:
      HostedZoneId: !Ref Route53HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt OPDomainName.RegionalDomainName
        HostedZoneId: !GetAtt OPDomainName.RegionalHostedZoneId

Outputs:

  OPGatewayURL:
    Description: URL for OpenID Provider API Gateway (mTLS enabled)
    Value: !Sub https://sandbox.as.trustframeworks.io/Prod