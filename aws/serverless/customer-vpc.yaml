AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: |
  Serverless application with OP Gateway for Authorization Server (AS) with mTLS and Fargate integration.

Parameters:

  Customer:
    Type: String
    Description: The Customer deployment for the customer. 

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${Customer}-VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: ap-southeast-2a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Customer}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: ap-southeast-2b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Customer}-PublicSubnet2

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: ap-southeast-2a
      VpcId: !Ref VPC

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: ap-southeast-2b
      VpcId: !Ref VPC

# -----------------------------------------------------------------------------

  PublicRouteTableA:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
        - Key: Name
          Value: !Sub ${Customer}-PublicRouteTableA

  PublicRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Customer}-PublicRouteTableB

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Customer}-InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicDefaultRouteA:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref PublicRouteTableA
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

  PublicDefaultRouteB:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref PublicRouteTableB
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTableA

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTableB


# -----------------------------------------------------------------------------
# Private subnets
# -----------------------------------------------------------------------------

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  NatA:
   Type: AWS::EC2::NatGateway
   Properties:
      AllocationId:
         Fn::GetAtt: EipA.AllocationId
      SubnetId:
         Ref: PublicSubnet1
  
  EipA:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
        Domain: vpc
  
  NatRouteA:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref PrivateRouteTableA
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatA

  NatB:
   Type: AWS::EC2::NatGateway
   Properties:
      AllocationId:
         Fn::GetAtt: EipB.AllocationId
      SubnetId:
         Ref: PublicSubnet2
  EipB:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
        Domain: vpc

  NatRouteB:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref PrivateRouteTableB
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatB

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableB

Outputs:

  VpcExport:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-vpc-id

  PublicSubnet1Export:
    Description: A reference to public subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-public-subnet-1-id

  PublicSubnet2Export:
    Description: A reference to public subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-public-subnet-2-id


  PrivateSubnetAExport:
    Description: A reference to private subnet A
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-private-subnet-a-id

  PrivateSubnetBExport:
    Description: A reference to private subnet B
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-private-subnet-b-id